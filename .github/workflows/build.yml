name: Build

on:
  push:
    branches: # ignore any tags
      - '**'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full

jobs:
  build:
    strategy:
      matrix:
        target:
          - aarch64-linux-android
          - x86_64-pc-windows-msvc
    env:
      RUST_BACKTRACE: full
      RUSTFLAGS: ${{ contains(matrix.target, 'msvc') && '-C target-feature=+crt-static' || '' }}
      CARGO: ${{ contains(matrix.target, 'android') && 'cross' || 'cargo' }}
      FEATURES: ${{ contains(matrix.target, 'android') && 'inotify,callback,download' || 'tray' }}

    runs-on: ${{ contains(matrix.target, 'msvc') && 'windows-latest' || 'ubuntu-latest' }}
    steps:
      - name: Cleanup pre-installed tools
        if: runner.os != 'Windows'
        run: |
          # This is a fix for https://github.com/actions/virtual-environments/issues/1918
          shopt -s nullglob
          sudo rm -rf /usr/share/{dotnet,swift,az*,gradle*,*conda} \
            /opt/{ghc,az} \
            /usr/local/share/boost /usr/local/graalvm /usr/local/julia* "$AGENT_TOOLSDIRECTORY"

      - uses: actions/checkout@v4

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - run: cargo fmt --check
      - run: cargo update

      - name: Install cross
        if: ${{ matrix.target == 'aarch64-linux-android' }}
        continue-on-error: true
        run: |
          cargo install cross --git https://github.com/cross-rs/cross || true
          cross --version

      - run: ${{ env.CARGO }} clippy --target ${{ matrix.target }} --features ${{ env.FEATURES }} -- -D warnings
      - run: ${{ env.CARGO }} build --release --target ${{ matrix.target }} --features ${{ env.FEATURES }}

      - name: Compress binary
        if: ${{ runner.os != 'Windows' }}
        run: |
          set -ex
          target=${{ matrix.target }}
          name=${{ github.event.repository.name }}
          FILE=$name-${GITHUB_SHA::7}-$target.xz
          xz -cv target/$target/release/$name > $FILE
          echo "FILE=$FILE" >> "$GITHUB_ENV"

      - name: Compress binary
        if: ${{ runner.os == 'Windows' }}
        run: |
          $ErrorActionPreference = 'Stop'
          $target = '${{ matrix.target }}'
          $name = '${{ github.event.repository.name }}'
          $FILE = "$name-$($env:GITHUB_SHA.Substring(0, 7))-$target.xz"
          7z a $FILE target/$target/release/$name.exe
          echo "FILE=$FILE" >> $env:GITHUB_ENV

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FILE }}
          path: ${{ env.FILE }}
